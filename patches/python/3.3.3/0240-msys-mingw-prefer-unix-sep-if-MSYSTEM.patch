diff -urN a/Include/osdefs.h b/Include/osdefs.h
--- a/Include/osdefs.h	2013-12-26 15:55:43.175483100 +0000
+++ b/Include/osdefs.h	2013-12-26 15:55:46.488672600 +0000
@@ -10,7 +10,7 @@
 /* Mod by chrish: QNX has WATCOM, but isn't DOS */
 #if !defined(__QNX__)
 #if defined(MS_WINDOWS) || defined(__BORLANDC__) || defined(__WATCOMC__) || defined(__DJGPP__) || defined(PYOS_OS2)
-#if defined(PYOS_OS2) && defined(PYCC_GCC)
+#if (defined(PYOS_OS2) && defined(PYCC_GCC)) || defined(__MINGW32__)
 #define MAXPATHLEN 260
 #define SEP L'/'
 #define ALTSEP L'\\'
diff -urN a/Lib/ntpath.py b/Lib/ntpath.py
--- a/Lib/ntpath.py	2013-12-26 15:55:43.437498100 +0000
+++ b/Lib/ntpath.py	2013-12-26 15:55:46.490672700 +0000
@@ -24,9 +24,13 @@
 curdir = '.'
 pardir = '..'
 extsep = '.'
-sep = '\\'
+if sys.platform == "win32" and "MSYSTEM" in os.environ:
+    sep = '/'
+    altsep = '\\'
+else:
+    sep = '\\'
+    altsep = '/'
 pathsep = ';'
-altsep = '/'
 defpath = '.;C:\\bin'
 if 'ce' in sys.builtin_module_names:
     defpath = '\\Windows'
@@ -43,21 +47,21 @@
 
 def _get_sep(path):
     if isinstance(path, bytes):
-        return b'\\'
+        return str.encode(sep)
     else:
-        return '\\'
+        return sep
 
 def _get_altsep(path):
     if isinstance(path, bytes):
-        return b'/'
+        return str.encode(altsep)
     else:
-        return '/'
+        return altsep
 
 def _get_bothseps(path):
     if isinstance(path, bytes):
-        return b'\\/'
+        return str.encode(sep+altsep)
     else:
-        return '\\/'
+        return sep+altsep
 
 def _get_dot(path):
     if isinstance(path, bytes):
diff -urN a/Python/pythonrun.c b/Python/pythonrun.c
--- a/Python/pythonrun.c	2013-12-26 15:55:44.363551100 +0000
+++ b/Python/pythonrun.c	2013-12-26 15:55:46.591678500 +0000
@@ -782,17 +782,29 @@
     PyInterpreterState_Delete(interp);
 }
 
-#ifdef MS_WINDOWS
-static wchar_t *progname = L"python";
+
+#if defined(MS_WINDOWS) && !defined(__MINGW32__)
+static wchar_t progname[PATH_MAX+1] = L"python";
 #else
-static wchar_t *progname = L"python3";
+static wchar_t progname[PATH_MAX+1] = L"python3";
 #endif
 
 void
 Py_SetProgramName(wchar_t *pn)
 {
     if (pn && *pn)
-        progname = pn;
+        wcsncpy(progname, pn, PATH_MAX);
+    pn = &progname[0];
+#ifdef __MINGW32__
+    char* msystem = Py_GETENV("MSYSTEM");
+    wchar_t altsep = msystem ? L'\\' : L'/';
+    wchar_t sep    = msystem ? L'/'  : L'\\';
+    wchar_t* seps = wcschr(pn, altsep);
+    while(seps) {
+        *seps = sep;
+        seps = wcschr(seps, altsep);
+    }
+#endif
 }
 
 wchar_t *
