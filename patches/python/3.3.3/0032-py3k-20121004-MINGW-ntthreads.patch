diff -urN a/Modules/_multiprocessing/multiprocessing.c b/Modules/_multiprocessing/multiprocessing.c
--- a/Modules/_multiprocessing/multiprocessing.c	2013-12-11 14:57:31.151394442 +0000
+++ b/Modules/_multiprocessing/multiprocessing.c	2013-12-11 14:57:31.348064173 +0000
@@ -200,6 +200,12 @@
         Py_DECREF(temp); Py_DECREF(value); return NULL; }         \
     Py_DECREF(value)
 
+#ifndef MS_WINDOWS
+/* GCC(mingw) 4.4+ require and use posix threads(pthreads-w32)
+ * Also system may contain installed pthreads-w32.
+ * As multiprocessing is based on windows methods we must
+ * comment all those flags
+ */
 #if defined(HAVE_SEM_OPEN) && !defined(POSIX_SEMAPHORES_NOT_ENABLED)
     ADD_FLAG(HAVE_SEM_OPEN);
 #endif
@@ -210,8 +216,10 @@
     ADD_FLAG(HAVE_BROKEN_SEM_GETVALUE);
 #endif
 #ifdef HAVE_BROKEN_SEM_UNLINK
+/* FIXME: why use this? Note before was for cygwin and darwin ? */
     ADD_FLAG(HAVE_BROKEN_SEM_UNLINK);
 #endif
+#endif /*ndef MS_WINDOWS*/
 
     if (PyModule_AddObject(module, "flags", temp) < 0)
         return NULL;
diff -urN a/Modules/signalmodule.c b/Modules/signalmodule.c
--- a/Modules/signalmodule.c	2013-12-11 14:57:31.148061083 +0000
+++ b/Modules/signalmodule.c	2013-12-11 14:57:31.348064173 +0000
@@ -8,6 +8,17 @@
 #include "posixmodule.h"
 #endif
 
+#ifdef __MINGW32__
+/* GCC 4.4+ (mingw) support posix threads!
+  Note: macro __MINGW_GCC is defined for GCC 4.4+ but
+  not for GCC 3.4.5 (last stable from 3.x )
+  Instead to use __MINGW_GCC we will use more common
+  __MINGW32__ to prevent case when in GCC 3.4.5 build
+  envirionment is installed posix thread package.
+ */
+# undef HAVE_PTHREAD_KILL
+#endif
+
 #if defined(__CYGWIN__)
 /* Type siginfo_t is different on cygwin. For instance si_band is not
  * a member of structure, so until fill_siginfo(siginfo_t *si) is
diff -urN a/Python/ceval.c b/Python/ceval.c
--- a/Python/ceval.c	2013-12-11 14:57:31.131394156 +0000
+++ b/Python/ceval.c	2013-12-11 14:57:31.348064173 +0000
@@ -11,6 +11,17 @@
 
 #include "Python.h"
 
+#ifdef __MINGW32__
+/* GCC 4.4+ (mingw) support posix threads!
+  Note: macro __MINGW_GCC is defined for GCC 4.4+ but
+  not for GCC 3.4.5 (last stable from 3.x )
+  Instead to use __MINGW_GCC we will use more common
+  __MINGW32__ to prevent case when in GCC 3.4.5 build
+  envirionment is installed posix thread package.
+ */
+# undef HAVE_PTHREAD_H
+#endif
+
 #include "code.h"
 #include "frameobject.h"
 #include "opcode.h"
diff -urN a/Python/thread.c b/Python/thread.c
--- a/Python/thread.c	2013-12-11 14:57:31.131394156 +0000
+++ b/Python/thread.c	2013-12-11 14:57:31.348064173 +0000
@@ -7,6 +7,17 @@
 
 #include "Python.h"
 
+#ifdef __MINGW32__
+/* GCC 4.4+ (mingw) support posix threads!
+  Note: macro __MINGW_GCC is defined for GCC 4.4+ but
+  not for GCC 3.4.5 (last stable from 3.x )
+  Instead to use __MINGW_GCC we will use more common
+  __MINGW32__ to prevent case when in GCC 3.4.5 build
+  envirionment is installed posix thread package.
+ */
+# undef HAVE_PTHREAD_H
+#endif
+
 #ifndef _POSIX_THREADS
 /* This means pthreads are not implemented in libc headers, hence the macro
    not present in unistd.h. But they still can be implemented as an external
diff -urN a/configure.ac b/configure.ac
--- a/configure.ac	2013-12-11 14:57:31.174728194 +0000
+++ b/configure.ac	2013-12-11 14:57:31.348064173 +0000
@@ -1611,6 +1611,19 @@
 AC_MSG_RESULT($ac_cv_pthread)
 fi
 
+if test "x$ac_cv_kpthread" = xno && \
+   test "x$ac_cv_kthread" = xno && \
+   test "x$ac_cv_pthread" = xno && \
+   test "x$ac_cv_pthread_is_default" = xno
+then
+	AC_MSG_CHECKING(for NT threads)
+	AC_CACHE_VAL(ac_cv_ntthread,
+	[AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[_beginthread(0, 0, 0);]])],
+	ac_cv_ntthread=yes,
+	ac_cv_ntthread=no)])
+	AC_MSG_RESULT([$ac_cv_ntthread])
+fi
+
 # If we have set a CC compiler flag for thread support then
 # check if it works for CXX, too.
 ac_cv_cxx_thread=no
@@ -1631,6 +1644,9 @@
 then 
   CXX="$CXX -pthread"
   ac_cv_cxx_thread=yes
+elif test "x$ac_cv_ntthread" = xyes
+then
+  ac_cv_cxx_thread=always
 fi
 
 if test $ac_cv_cxx_thread = yes
@@ -1661,6 +1677,13 @@
 
 # checks for header files
 AC_HEADER_STDC
+case $host in
+  *-*-mingw*)
+    # TODO: not yet
+    # NOTE: header is defined in Pthreads-w32
+    ac_cv_header_sched_h=ignore
+    ;;
+esac
 ac_save_cppflags="$CPPFLAGS"
 CPPFLAGS="$CPPFLAGS -I/usr/include/ncursesw"
 AC_CHECK_HEADERS(asm/types.h conio.h curses.h direct.h dlfcn.h errno.h \
@@ -2350,11 +2373,20 @@
 AC_CHECK_LIB(dld, shl_load)	# Dynamic linking for HP-UX
 
 # only check for sem_init if thread support is requested
+case $host in
+  *-*-mingw*)
+  dnl windows build don't use pthread and we don't like configure
+  dnl to add pthread library if found
+  :
+  ;;
+  *)
 if test "$with_threads" = "yes" -o -z "$with_threads"; then
     AC_SEARCH_LIBS(sem_init, pthread rt posix4) # 'Real Time' functions on Solaris
 						# posix4 on Solaris 2.6
 						# pthread (first!) on Linux
 fi
+  ;;
+esac
 
 # check if we need libintl for locale functions
 case $host in
@@ -2579,6 +2611,13 @@
     AC_DEFINE(WITH_THREAD)
     posix_threads=yes
     THREADOBJ="Python/thread.o"
+elif test "x$ac_cv_ntthread" = xyes
+then
+    AC_DEFINE(WITH_THREAD)
+    posix_threads=no
+    THREADOBJ="Python/thread.o"
+    AC_DEFINE(NT_THREADS, 1,
+	[Define to 1 if you want to use native NT threads])
 else
     if test ! -z "$with_threads" -a -d "$with_threads"
     then LDFLAGS="$LDFLAGS -L$with_threads"
@@ -3024,6 +3063,13 @@
 fi
 
 # checks for library functions
+case $host in
+  *-*-mingw*)
+    # TODO: not yet
+    # NOTE: function is defined in Pthreads-w32
+    ac_cv_func_sched_setscheduler=ignore
+    ;;
+esac
 AC_CHECK_FUNCS(alarm accept4 setitimer getitimer bind_textdomain_codeset chown \
  clock confstr ctermid execv faccessat fchmod fchmodat fchown fchownat \
  fexecve fdopendir fork fpathconf fstatat ftime ftruncate futimesat \
@@ -4096,6 +4142,13 @@
 # the kernel module that provides POSIX semaphores
 # isn't loaded by default, so an attempt to call
 # sem_open results in a 'Signal 12' error.
+if test $ac_cv_func_sem_open = yes; then
+case $host in
+  *-*-mingw*)
+    # GCC 4.4+ (mingw) support posix threads(!)
+    # bug we won't use them on windows platform.
+    ac_cv_posix_semaphores_enabled=no;;
+esac
 AC_MSG_CHECKING(whether POSIX semaphores are enabled)
 AC_CACHE_VAL(ac_cv_posix_semaphores_enabled,
 AC_RUN_IFELSE([AC_LANG_SOURCE([[
@@ -4121,6 +4174,9 @@
 [ac_cv_posix_semaphores_enabled=yes])
 )
 AC_MSG_RESULT($ac_cv_posix_semaphores_enabled)
+else
+   ac_cv_posix_semaphores_enabled=no
+fi
 if test $ac_cv_posix_semaphores_enabled = no
 then
   AC_DEFINE(POSIX_SEMAPHORES_NOT_ENABLED, 1,
@@ -4129,6 +4185,16 @@
 
 # Multiprocessing check for broken sem_getvalue
 AC_MSG_CHECKING(for broken sem_getvalue)
+case $host in
+  *-*-mingw*)
+    # GCC(mingw) 4.4+ require and use posix threads(pthreads-w32)
+    # Also system may contain installed pthreads-w32.
+    # NOTE the test case below don't work for pthreads-w32:
+    # - SEM_FAILED is not defined;
+    # - sem_open is stub;
+    # - sem_getvalue work(!).
+    ac_cv_broken_sem_getvalue=no;;
+esac
 AC_CACHE_VAL(ac_cv_broken_sem_getvalue,
 AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <unistd.h>
