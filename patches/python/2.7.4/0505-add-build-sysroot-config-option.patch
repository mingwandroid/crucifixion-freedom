diff -urN a/configure.ac b/configure.ac
--- a/configure.ac	2013-05-01 00:04:15.079366479 +0100
+++ b/configure.ac	2013-05-01 00:04:31.549500123 +0100
@@ -558,6 +558,16 @@
 CONFIGURE_MACOSX_DEPLOYMENT_TARGET=
 EXPORT_MACOSX_DEPLOYMENT_TARGET='#'
 
+# There are certain cases where we don't want build machine's
+# sysroot folders (/usr/include, /usr/lib, /usr/lib64 etc) to
+# be used. An example of where this is needed is if running
+# on a 64bit machine via linux32 running a 32bit targetting GCC.
+# Without this, 64bit libs will cause the linker to fail.
+# This also prevents add_multiarch_paths from being called.
+AC_MSG_CHECKING(for --with-build-sysroot)
+AC_ARG_WITH([build-sysroot],
+AS_HELP_STRING([--with-build-sysroot], [Select sysroot and ignore multilibs, even when not cross-compiling]))
+
 # checks for alternative programs
 
 # compiler flags are generated in two sets, BASECFLAGS and OPT.  OPT is just
diff -urN a/setup.py b/setup.py
--- a/setup.py	2013-05-01 00:04:15.107366706 +0100
+++ b/setup.py	2013-05-01 00:13:26.957797645 +0100
@@ -33,6 +33,16 @@
 # Were we compiled --with-pydebug or with #define Py_DEBUG?
 COMPILED_WITH_PYDEBUG = ('--with-pydebug' in sysconfig.get_config_var("CONFIG_ARGS"))
 
+with_build_sysroot_args = [arg.split('=')[-1] for arg in sysconfig.get_config_var("CONFIG_ARGS").split()
+                           if ('--with-build-sysroot' in arg)]
+
+if len(with_build_sysroot_args):
+    with_build_sysroot_specified = True
+    with_build_sysroot = with_build_sysroot_args[len(with_build_sysroot_args)-1].replace("'",'')
+else:
+    with_build_sysroot_specified = False
+    with_build_sysroot = '/usr'
+
 # This global variable is used to hold the list of modules to be disabled.
 disabled_module_list = []
 
@@ -407,9 +417,9 @@
 
         if multiarch_path_component != '':
             add_dir_to_list(self.compiler.library_dirs,
-                            '/usr/lib/' + multiarch_path_component)
+                            with_build_sysroot + '/lib/' + multiarch_path_component)
             add_dir_to_list(self.compiler.include_dirs,
-                            '/usr/include/' + multiarch_path_component)
+                            with_build_sysroot + '/include/' + multiarch_path_component)
             return
 
         if not find_executable('dpkg-architecture'):
@@ -428,9 +438,9 @@
                 with open(tmpfile) as fp:
                     multiarch_path_component = fp.readline().strip()
                 add_dir_to_list(self.compiler.library_dirs,
-                                '/usr/lib/' + multiarch_path_component)
+                                with_build_sysroot + '/lib/' + multiarch_path_component)
                 add_dir_to_list(self.compiler.include_dirs,
-                                '/usr/include/' + multiarch_path_component)
+                                with_build_sysroot + '/include/' + multiarch_path_component)
         finally:
             os.unlink(tmpfile)
 
@@ -468,9 +478,10 @@
 
     def detect_modules(self):
         if not cross_compiling:
-            # Ensure that /usr/local is always used
-            add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
-            add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+            # Don't use /usr/local if specified a build sysroot.
+            if not with_build_sysroot_specified:
+                add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
+                add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
             self.add_multiarch_paths()
 
         # Add paths specified in the environment variables LDFLAGS and
@@ -530,7 +541,9 @@
         # be assumed that no additional -I,-L directives are needed.
         inc_dirs = self.compiler.include_dirs[:]
         lib_dirs = self.compiler.library_dirs[:]
-        if not cross_compiling:
+        # This bit was already questionable when I got here. I've
+        # disabled it when a build sysroot has been specified.
+        if not cross_compiling and not with_build_sysroot_specified:
             if not (sys.version.find('GCC') and host_platform in ['mingw', 'win32']):
                 for d in (
                     '/usr/include',
@@ -816,11 +829,11 @@
             elif curses_library:
                 readline_libs.append(curses_library)
             elif self.compiler.find_library_file(lib_dirs +
-                                                     ['/usr/lib/termcap'],
+                                                     [with_build_sysroot + '/lib/termcap'],
                                                      'termcap'):
                 readline_libs.append('termcap')
             exts.append( Extension('readline', ['readline.c'],
-                                   library_dirs=['/usr/lib/termcap'],
+                                   library_dirs=[with_build_sysroot + '/lib/termcap'],
                                    extra_link_args=readline_extra_link_args,
                                    libraries=readline_libs) )
         else:
@@ -847,20 +860,20 @@
                                libraries=_socket_libs) )
         # Detect SSL support for the socket module (via _ssl)
         search_for_ssl_incs_in = [
-                              '/usr/local/ssl/include',
-                              '/usr/contrib/ssl/include/'
+                              with_build_sysroot + '/local/ssl/include',
+                              with_build_sysroot + '/contrib/ssl/include/'
                              ]
         ssl_incs = find_file('openssl/ssl.h', inc_dirs,
                              search_for_ssl_incs_in
                              )
         if ssl_incs is not None:
             krb5_h = find_file('krb5.h', inc_dirs,
-                               ['/usr/kerberos/include'])
+                               [with_build_sysroot + '/kerberos/include'])
             if krb5_h:
                 ssl_incs += krb5_h
         ssl_libs = find_library_file(self.compiler, 'ssl',lib_dirs,
-                                     ['/usr/local/ssl/lib',
-                                      '/usr/contrib/ssl/lib/'
+                                     [with_build_sysroot + '/local/ssl/lib',
+                                      with_build_sysroot + '/contrib/ssl/lib/'
                                      ] )
 
         if (ssl_incs is not None and
